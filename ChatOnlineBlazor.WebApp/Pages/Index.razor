@page "/index"
@using Microsoft.AspNetCore.SignalR.Client


<h1>Chat online simples</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Digite seu nome para entrar na conversa
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Entrar na conversa</button>

    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Olá <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Sair</button>
    </div>
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.UserName</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="digite sua mensagem " @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Enviar mensagem </button>
    </div>
}

@code{
    private bool _isChatting = false;

    private string _username;

    private string _message;

    private string _newMessage;

    private List<Message> _messages = new();


    private string _hubUrl;
    private HubConnection _hubConnection;

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if(_isChatting && string.IsNullOrWhiteSpace(message) is false)
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);
            _newMessage = string.Empty;
        }
    }

    private async Task DisconnectAsync()
    {
        if(_isChatting)
        {
            await SendAsync($"[Notificação] {_username} saiu.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    public async Task Chat()
    {
        if(string.IsNullOrWhiteSpace(_username))
        {
            _message = "Por favor digite o seu nome.";
            return;
        }

        try
        {
            _isChatting = true;

            _messages.Clear();

            _hubUrl = "http://localhost:5159" + "/chat";

            _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl).Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notificação] {_username} entrou na conversa.");
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _isChatting = false;
        }
    }

    private class Message
    {
        public Message(string name, string message, bool isMine)
        {
            UserName = name;
            Body = message;
            Mine = isMine;
        }

        public string UserName { get; set; }

        public string Body { get; set; }

        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Noticação]");

        public string CSS => Mine ? "sent" : "received";
    }
}